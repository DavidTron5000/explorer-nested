{"version":3,"sources":["CustomArgs.js","App.js","index.js"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","App","props","context","state","schema","query","explorerIsOpen","url","key","_handleInspectOperation","cm","mousePos","parsedQuery","parse","console","error","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operationKind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","fetcher","params","fetch","method","headers","Accept","body","JSON","stringify","then","response","text","responseBody","e","_graphiql","GraphiQL","this","getIntrospectionQuery","result","editor","getQueryEditor","setOption","options","extraKeys","buildClientSchema","data","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.105c8bfa.chunk.js","sourcesContent":["import GraphiQLExplorer from \"graphiql-explorer\"\nimport { isEnumType, isWrappingType } from \"graphql\"\n\nfunction unwrapOutputType(outputType) {\n  let unwrappedType = outputType\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType\n  }\n  return unwrappedType\n}\n\nexport function makeDefaultArg(parentField, arg) {\n  const unwrappedType = unwrapOutputType(parentField.type)\n  if (\n    unwrappedType.name.startsWith(\"GitHub\") &&\n    unwrappedType.name.endsWith(\"Connection\") &&\n    (arg.name === \"first\" || arg.name === \"orderBy\")\n  ) {\n    return true\n  }\n  return false\n}\n\nexport function getDefaultScalarArgValue(parentField, arg, argType) {\n  const unwrappedType = unwrapOutputType(parentField.type)\n  switch (unwrappedType.name) {\n    case \"GitHubRepository\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql-js\" }\n      } else if (arg.name === \"owner\") {\n        return { kind: \"StringValue\", value: \"graphql\" }\n      }\n      break\n    case \"NpmPackage\":\n      if (arg.name === \"name\") {\n        return { kind: \"StringValue\", value: \"graphql\" }\n      }\n      break\n    default:\n      if (\n        isEnumType(argType) &&\n        unwrappedType.name.startsWith(\"GitHub\") &&\n        unwrappedType.name.endsWith(\"Connection\")\n      ) {\n        if (\n          arg.name === \"direction\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"DESC\")\n        ) {\n          return { kind: \"EnumValue\", value: \"DESC\" }\n        } else if (\n          arg.name === \"field\" &&\n          argType\n            .getValues()\n            .map(x => x.name)\n            .includes(\"CREATED_AT\")\n        ) {\n          return { kind: \"EnumValue\", value: \"CREATED_AT\" }\n        }\n      }\n      return GraphiQLExplorer.defaultValue(argType)\n  }\n  return GraphiQLExplorer.defaultValue(argType)\n}\n","import React, { Component } from \"react\"\nimport GraphiQL from \"graphiql\"\nimport GraphiQLExplorer from \"graphiql-explorer\"\nimport { buildClientSchema, getIntrospectionQuery, parse } from \"graphql\"\nimport { makeDefaultArg, getDefaultScalarArgValue } from \"./CustomArgs\"\nimport \"graphiql/graphiql.css\"\nimport \"./App.css\"\n\nfunction createFetcher() {\n  return (params) => {\n    // Call to proxied endpoint\n    return fetch('/.netlify/functions/graphql', {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(params)\n    })\n    .then((response) => {\n      return response.text()\n    })\n    .then((responseBody) => {\n      try {\n        return JSON.parse(responseBody)\n      } catch (e) {\n        return responseBody\n      }\n    })\n  }\n}\n\nconst DEFAULT_QUERY = `## How to use the graphQL explorer! ##\n#  1. Click the fields on the left to add queries, mutations & subscriptions\n#  2. Click â–· button to run the query, mutation or subscription\n\nquery blocksQuery {\n  listVendia_BlockItems {\n    nextToken\n    Vendia_BlockItems {\n      _id\n      blockSchemaVersion\n      blockId\n      redactedBlockHash\n      previousBlockId\n      previousRedactedBlockHash\n      blockHash\n      previousBlockHash\n      status\n      commitTime\n      _owner\n      transactions {\n        _id\n        hash\n        redactedHash\n        signature\n        version\n        submissionTime\n        mutations\n        _owner\n      }\n    }\n  }\n}\n\n# Send graphQL mutation\nmutation exampleMutation {\n  add_Product(\n    input: {name: \"widgets\", description: \"descr\", price: 1.5, size: S}\n    syncMode: NODE_LEDGERED\n  ) {\n    result {\n      _id\n      description\n      name\n      price\n      size\n      sku\n      tags\n      _owner\n    }\n  }\n}\n`\n\nexport default class App extends Component {\n  state = {\n    schema: null,\n    query: DEFAULT_QUERY,\n    explorerIsOpen: true,\n    url: null,\n    key: null\n  }\n\n  constructor (props, context) {\n    super(props, context)\n    const fetcher = createFetcher()\n    this._graphiql = GraphiQL\n    this.fetcher = fetcher\n  }\n\n  componentDidMount() {\n\n    this.fetcher({\n      query: getIntrospectionQuery()\n    }).then(result => {\n      const editor = this._graphiql.getQueryEditor()\n      editor.setOption(\"extraKeys\", {\n        ...(editor.options.extraKeys || {}),\n        \"Shift-Alt-LeftClick\": this._handleInspectOperation\n      })\n\n      this.setState({\n        schema: buildClientSchema(result.data)\n      })\n    })\n  }\n\n  _handleInspectOperation = (cm, mousePos) => {\n    const parsedQuery = parse(this.state.query || \"\")\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\")\n      return null\n    }\n\n    var token = cm.getTokenAt(mousePos)\n    var start = { line: mousePos.line, ch: token.start }\n    var end = { line: mousePos.line, ch: token.end }\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end)\n    }\n\n    var position = relevantMousePos\n\n    var def = parsedQuery.definitions.find(definition => {\n      if (!definition.loc) {\n        console.log(\"Missing location information for definition\")\n        return false\n      }\n\n      const { start, end } = definition.loc\n      return start <= position.start && end >= position.end\n    })\n\n    if (!def) {\n      console.error(\n        \"Unable to find definition corresponding to mouse position\"\n      )\n      return null\n    }\n\n    var operationKind =\n      def.kind === \"OperationDefinition\"\n        ? def.operation\n        : def.kind === \"FragmentDefinition\"\n        ? \"fragment\"\n        : \"unknown\"\n\n    var operationName =\n      def.kind === \"OperationDefinition\" && !!def.name\n        ? def.name.value\n        : def.kind === \"FragmentDefinition\" && !!def.name\n        ? def.name.value\n        : \"unknown\"\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`\n\n    var el = document.querySelector(selector)\n    el && el.scrollIntoView()\n  }\n\n  _handleEditQuery = (query) => this.setState({ query })\n\n  _handleToggleExplorer = () => {\n    this.setState({\n      explorerIsOpen: !this.state.explorerIsOpen\n    })\n  }\n\n  render() {\n    const { query, schema } = this.state\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={this._handleEditQuery}\n          onRunOperation={operationName =>\n            this._graphiql.handleRunQuery(operationName)\n          }\n          explorerIsOpen={this.state.explorerIsOpen}\n          onToggleExplorer={this._handleToggleExplorer}\n          getDefaultScalarArgValue={getDefaultScalarArgValue}\n          makeDefaultArg={makeDefaultArg}\n        />\n        <GraphiQL\n          ref={ref => (this._graphiql = ref)}\n          fetcher={this.fetcher}\n          schema={schema}\n          query={query}\n          onEditQuery={this._handleEditQuery}\n        >\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n            <GraphiQL.Button\n              onClick={this._handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    )\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}